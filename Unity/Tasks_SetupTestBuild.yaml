parameters:
  - name: projectPath
    type: string
  - name: buildOutputPath
    type: string
  - name: buildName
    type: string
    default: drop
  - name: shouldTest
    type: boolean
    default: true
  - name: shouldBuild
    type: boolean
    default: true
  - name: buildTarget
    type: string
    default: Win64
  - name: modules
    type: object
    default: []
  - name: os
    type: string
    default: win

steps:
  - template: Task_GetProjectVersion.yaml
    parameters:
      unityProjectPath: ${{parameters.projectPath}}
  - template: Task_HubInstallEditor.yaml
    parameters:
      unityVersion: $(projectVersion)
      unityVersionRevision: $(projectVersionRevision)
      os: ${{parameters.os}}
      modules: ${{parameters.modules}}
      continueOnError: true
  - ${{ if parameters.shouldTest }}:
    - template: Task_EditorTest.yaml
      parameters:
        unityVersion: $(projectVersion)
        os: ${{parameters.os}}
        unityProjectPath: ${{parameters.projectPath}}
        testPlatform:
          - EditMode -nographics
    - template: Task_EditorTest.yaml
      parameters:
        condition: and(succeeded(), contains(variables['Build.SourceVersionMessage'], '[PlayMode]'))
        unityVersion: $(projectVersion)
        os: ${{parameters.os}}
        unityProjectPath: ${{parameters.projectPath}}
        testPlatform:
          - PlayMode
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'NUnit' # 'JUnit' | 'NUnit' | 'VSTest' | 'XUnit' | 'CTest'. Alias: testRunner. Required. Test result format. Default: JUnit.
        testResultsFiles: '**/TestResults-*.xml'
    - task: PublishCodeCoverageResults@1
      condition: succeededOrFailed()
      inputs:
        codeCoverageTool: 'Cobertura' # 'Cobertura' | 'JaCoCo'. Required. Code coverage tool. Default: JaCoCo.
        summaryFileLocation: '**/Cobertura.xml'
  - ${{ if parameters.shouldBuild }}:
    - template: Task_EditorBuildScript.yaml
      parameters:
        unityProjectPath: ${{parameters.projectPath}}
        outputPath: ${{parameters.buildOutputPath}}
        outputFileName: ${{parameters.buildName}}
    - template: Task_EditorBuild.yaml
      parameters:
        os: ${{parameters.os}}
        unityVersion: $(projectVersion)
        unityProjectPath: ${{parameters.projectPath}}
        buildTarget: ${{parameters.buildTarget}}
